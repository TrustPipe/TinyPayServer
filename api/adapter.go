package api

import (
	"encoding/hex"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"tinypay-server/client"
)

// APIServer implements the ServerInterface generated by oapi-codegen
type APIServer struct {
	aptosClient *client.AptosClient
}

// NewAPIServer creates a new API server instance
func NewAPIServer(aptosClient *client.AptosClient) *APIServer {
	return &APIServer{
		aptosClient: aptosClient,
	}
}

// HealthCheck implements the health check endpoint
func (s *APIServer) HealthCheck(c *gin.Context) {
	response := HealthResponse{
		Status:          "healthy",
		MerchantAddress: s.aptosClient.GetMerchantAddress(),
	}
	
	if paymasterAddr := s.aptosClient.GetPaymasterAddress(); paymasterAddr != "" {
		response.PaymasterAddress = &paymasterAddr
	}
	
	c.JSON(http.StatusOK, response)
}

// CreatePayment implements the payment creation endpoint
func (s *APIServer) CreatePayment(c *gin.Context) {
	var req PaymentRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		// Check for missing fields
		missingFields := []string{}
		if req.PayerAddr == "" {
			missingFields = append(missingFields, "payer_addr")
		}
		if req.Opt == "" {
			missingFields = append(missingFields, "opt")
		}
		if req.PayeeAddr == "" {
			missingFields = append(missingFields, "payee_addr")
		}
		if req.Amount == 0 {
			missingFields = append(missingFields, "amount")
		}

		if len(missingFields) > 0 {
			c.JSON(http.StatusBadRequest, MissingFieldsError{
				Error:         MissingFields,
				Message:       "缺少必需字段",
				MissingFields: missingFields,
			})
			return
		}

		c.JSON(http.StatusBadRequest, SimulationFailedError{
			Error:   SimulationFailed,
			Message: "交易不合法，模拟失败",
			Details: "Invalid request body: " + err.Error(),
		})
		return
	}

	// Convert hex strings to bytes
	optBytes, err := hex.DecodeString(req.Opt)
	if err != nil {
		c.JSON(http.StatusBadRequest, SimulationFailedError{
			Error:   SimulationFailed,
			Message: "交易不合法，模拟失败",
			Details: "Invalid opt format: " + err.Error(),
		})
		return
	}

	// Convert amount to uint64
	amount := uint64(req.Amount)

	// Simulate the transaction first
	err = s.aptosClient.SimulatePayment(optBytes, req.PayerAddr, req.PayeeAddr, amount)
	if err != nil {
		c.JSON(http.StatusBadRequest, SimulationFailedError{
			Error:   SimulationFailed,
			Message: "交易不合法，模拟失败",
			Details: err.Error(),
		})
		return
	}

	// Submit the transaction
	txHash, err := s.aptosClient.SubmitPayment(optBytes, req.PayerAddr, req.PayeeAddr, amount)
	if err != nil {
		c.JSON(http.StatusBadRequest, SimulationFailedError{
			Error:   SimulationFailed,
			Message: "交易不合法，模拟失败",
			Details: err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, PaymentSuccessResponse{
		Status:          Submitted,
		TransactionHash: txHash,
		Message:         "交易模拟成功，已提交到区块链",
	})
}

// GetTransactionStatus implements the transaction status query endpoint
func (s *APIServer) GetTransactionStatus(c *gin.Context, transactionHash string) {
	if transactionHash == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "invalid_request",
			"message": "Transaction hash is required",
		})
		return
	}

	// Get detailed transaction information
	txInfo, err := s.aptosClient.GetTransactionDetails(transactionHash)
	if err != nil {
		c.JSON(http.StatusNotFound, TransactionNotFoundError{
			Error:   NotFound,
			Message: "交易不存在",
		})
		return
	}

	if !txInfo.Confirmed {
		c.JSON(http.StatusOK, TransactionPendingResponse{
			Status:          Pending,
			TransactionHash: transactionHash,
			Message:         "交易正在处理中",
		})
		return
	}

	if txInfo.Success {
		// Convert amount from octas to APT (1 APT = 100,000,000 octas)
		amountInAPT := float64(txInfo.Amount) / 100000000.0
		c.JSON(http.StatusOK, TransactionConfirmedResponse{
			Status:          Confirmed,
			TransactionHash: transactionHash,
			Success:         true,
			ReceivedAmount:  strconv.FormatFloat(amountInAPT, 'f', 8, 64),
			Currency:        "APT",
			Message:         "交易已经被区块链确认",
		})
	} else {
		c.JSON(http.StatusOK, TransactionFailedResponse{
			Status:          Failed,
			TransactionHash: transactionHash,
			Success:         false,
			Error:           txInfo.Error,
			Message:         "交易失败",
		})
	}
}