// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for PaymentRequestCurrency.
const (
	APT  PaymentRequestCurrency = "APT"
	ETH  PaymentRequestCurrency = "ETH"
	USDC PaymentRequestCurrency = "USDC"
)

// Defines values for PaymentRequestNetwork.
const (
	PaymentRequestNetworkAptosTestnet PaymentRequestNetwork = "aptos-testnet"
	PaymentRequestNetworkEthSepolia   PaymentRequestNetwork = "eth-sepolia"
)

// Defines values for GetTransactionStatusParamsNetwork.
const (
	GetTransactionStatusParamsNetworkAptosTestnet GetTransactionStatusParamsNetwork = "aptos-testnet"
	GetTransactionStatusParamsNetworkEthSepolia   GetTransactionStatusParamsNetwork = "eth-sepolia"
)

// Defines values for GetUserLimitsParamsNetwork.
const (
	AptosTestnet GetUserLimitsParamsNetwork = "aptos-testnet"
	EthSepolia   GetUserLimitsParamsNetwork = "eth-sepolia"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	// Code 业务状态码
	Code int `json:"code"`

	// Data 响应数据
	Data *map[string]interface{} `json:"data"`
}

// PaymentRequest defines model for PaymentRequest.
type PaymentRequest struct {
	// Amount 金额 uint类型
	Amount int64 `json:"amount"`

	// Currency 货币种类
	Currency *PaymentRequestCurrency `json:"currency,omitempty"`

	// Network 目标网络
	Network *PaymentRequestNetwork `json:"network,omitempty"`

	// Opt OPT hex格式
	Opt string `json:"opt"`

	// PayeeAddr 收款地址 hex格式
	PayeeAddr string `json:"payee_addr"`

	// PayerAddr 付款地址 hex格式
	PayerAddr string `json:"payer_addr"`
}

// PaymentRequestCurrency 货币种类
type PaymentRequestCurrency string

// PaymentRequestNetwork 目标网络
type PaymentRequestNetwork string

// GetTransactionStatusParams defines parameters for GetTransactionStatus.
type GetTransactionStatusParams struct {
	// Network 目标网络
	Network *GetTransactionStatusParamsNetwork `form:"network,omitempty" json:"network,omitempty"`
}

// GetTransactionStatusParamsNetwork defines parameters for GetTransactionStatus.
type GetTransactionStatusParamsNetwork string

// GetUserLimitsParams defines parameters for GetUserLimits.
type GetUserLimitsParams struct {
	// Network 目标网络
	Network *GetUserLimitsParamsNetwork `form:"network,omitempty" json:"network,omitempty"`
}

// GetUserLimitsParamsNetwork defines parameters for GetUserLimits.
type GetUserLimitsParamsNetwork string

// CreatePaymentJSONRequestBody defines body for CreatePayment for application/json ContentType.
type CreatePaymentJSONRequestBody = PaymentRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 健康检查
	// (GET /api)
	HealthCheck(c *gin.Context)
	// 创建支付交易
	// (POST /api/payments)
	CreatePayment(c *gin.Context)
	// 查询交易状态
	// (GET /api/payments/{transaction_hash})
	GetTransactionStatus(c *gin.Context, transactionHash string, params GetTransactionStatusParams)
	// 查询用户限制
	// (GET /api/users/{user_address}/limits)
	GetUserLimits(c *gin.Context, userAddress string, params GetUserLimitsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePayment(c)
}

// GetTransactionStatus operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "transaction_hash" -------------
	var transactionHash string

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_hash", c.Param("transaction_hash"), &transactionHash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transaction_hash: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionStatusParams

	// ------------- Optional query parameter "network" -------------

	err = runtime.BindQueryParameter("form", true, false, "network", c.Request.URL.Query(), &params.Network)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter network: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionStatus(c, transactionHash, params)
}

// GetUserLimits operation middleware
func (siw *ServerInterfaceWrapper) GetUserLimits(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_address" -------------
	var userAddress string

	err = runtime.BindStyledParameterWithOptions("simple", "user_address", c.Param("user_address"), &userAddress, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_address: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserLimitsParams

	// ------------- Optional query parameter "network" -------------

	err = runtime.BindQueryParameter("form", true, false, "network", c.Request.URL.Query(), &params.Network)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter network: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserLimits(c, userAddress, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api", wrapper.HealthCheck)
	router.POST(options.BaseURL+"/api/payments", wrapper.CreatePayment)
	router.GET(options.BaseURL+"/api/payments/:transaction_hash", wrapper.GetTransactionStatus)
	router.GET(options.BaseURL+"/api/users/:user_address/limits", wrapper.GetUserLimits)
}
