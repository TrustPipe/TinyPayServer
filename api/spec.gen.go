// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
